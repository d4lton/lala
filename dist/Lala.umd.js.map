{"version":3,"file":null,"sources":["../src/ParseError.js","../src/Parser.js","../src/Lexer.js","../src/InterpretError.js","../src/Interpreter.js","../src/Lala.js"],"sourcesContent":["/**\n * Hemp\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nfunction ParseError(message, token, expected) {\n  this.message = message;\n  this.token = token;\n  this.expected = expected;\n};\nParseError.prototype = new Error;\n\nexport default ParseError;\n","/**\n * Hemp\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nimport ParseError from './ParseError.js';\n\nclass Parser {\n\n  constructor(grammar, lexer) {\n    this.grammar = grammar;\n    this.lexer = lexer;\n    this.token = this.lexer.nextToken();\n  };\n\n  reset() {\n    this.lexer.reset();\n    this.token = this.lexer.nextToken();\n  };\n\n  cloneCurrentToken() {\n    return JSON.parse(JSON.stringify(this.token));\n  };\n\n  eat(type, value) {\n    if (!this.token) {\n        throw new ParseError('Expected ' + type + ': \"' + value + '\"', null, {type: type, value: value});\n    }\n    if (this.token.type == type && ((typeof value !== 'undefined') ? (this.token.value == value) : true)) {\n      this.token = this.lexer.nextToken();\n    } else {\n      if (typeof value !== 'undefined') {\n        throw new ParseError('Expected ' + type + ': \"' + value + '\"', this.cloneCurrentToken(), {type: type, value: value});\n      } else {\n        throw new ParseError('Expected ' + type, this.cloneCurrentToken(), {type: type});\n      }\n    }\n  };\n\n  factor() {\n    var token = this.cloneCurrentToken();\n    if (token.type == 'parenthesis' && token.value == '(') {\n      this.eat(token.type, '(');\n      var result = this.term();\n      this.eat('parenthesis', ')');\n      return result;\n    } else if (token.type == 'operator' && token.value == '-') {\n      this.eat(token.type);\n      return {\n        type: 'MinusOperator',\n        value: this.term(),\n        start: token.start,\n        end: token.end\n      }\n    } else if (token.type == 'number') {\n      this.eat(token.type);\n      return {\n        type: 'NumericConstant',\n        value: token.value,\n        start: token.start,\n        end: token.end\n      };\n    } else if (token.type == \"string\") {\n      this.eat(token.type);\n      return {\n        type: 'StringConstant',\n        value: token.value,\n        start: token.start,\n        end: token.end\n      };\n    } else if (token.type == 'identifier') {\n      if (this.grammar.reserved.indexOf(token.value) !== -1) {\n        return this.expression();\n      }\n      this.eat(token.type);\n      var type = 'Variable';\n      if (token.value == 'true' || token.value == 'false') {\n        type = 'BooleanConstant';\n        token.value = (token.value == 'true') ? true : false;\n      }\n      return {\n        type: type,\n        value: token.value,\n        start: token.start,\n        end: token.end\n      }\n    } else if (token.type == 'braces') {\n      this.eat(token.type, '{');\n      var result = this.block();\n      this.eat('braces', '}');\n      return result;\n    } else {\n      throw new ParseError('Expected an expression', token);\n    }\n  };\n\n  makeTermNode(type, node) {\n    var token = this.cloneCurrentToken();\n    this.eat(this.token.type);\n    return {\n      type: type,\n      left: node,\n      operator: token.value,\n      right: this.term(),\n      start: token.start,\n      end: token.end\n    };\n  };\n\n  term() {\n\n    var node = this.factor();\n\n    var foundOperator = false;\n    do {\n      foundOperator = false;\n      for (var i = 0; i < this.grammar.operators.length; i++) {\n        while (this.token && this.token.type === 'operator' && this.token.value === this.grammar.operators[i].value) {\n          node = this.makeTermNode(this.grammar.operators[i].result, node);\n          foundOperator = true;\n        }\n      }\n    } while (foundOperator);\n\n    return node;\n\n  };\n\n  expression() {\n\n    if (this.token) {\n      if (this.token.type === 'identifier' && this.grammar.reserved.indexOf(this.token.value) !== -1) {\n        for (var i = 0; i < this.grammar.expressions.length; i++) {\n          if (this.grammar.expressions[i].type === this.token.type && this.grammar.expressions[i].value === this.token.value) {\n            var node = {\n              type: this.grammar.expressions[i].result,\n              start: this.token.start,\n              end: this.token.end\n            };\n            this.eat(this.token.type, this.token.value);\n            var rules = this.grammar.expressions[i].rules;\n            for (var j = 0; j < rules.length; j++) {\n              var rule = rules[j];\n              if (rule.optional === true && (!this.token || this.token.type != rule.type || rule.values.indexOf(this.token.value) === -1)) {\n                break;\n              }\n              if (rule.parse) {\n                node[rule.result] = this[rule.parse]();\n              } else {\n                this.eat(rule.type, rule.value);\n              }\n            }\n            return node;\n          }\n        }\n      }\n      return this.term();\n    }\n\n  };\n\n  block() {\n    var node = {\n      type: 'Block',\n      nodes: []\n    };\n    while (this.token) {\n      if (this.token.type === 'braces' && this.token.value === '}') {\n        break;\n      }\n      node.nodes.push(this.expression());\n    }\n    return node;\n  };\n\n  parse() {\n    this.reset();\n    return [this.block()];\n  };\n\n};\n\nexport default Parser;\n","/**\n * Hemp\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nclass Lexer {\n\n  constructor(lexicon, text) {\n    this.lexicon = lexicon;\n    this.text = text;\n    this.pos = -1;\n  }\n\n  reset() {\n    this.pos = -1;\n  };\n\n  next() {\n    if (!this.end()) {\n      this.pos++;\n      this.current = this.text[this.pos];\n      return this.current;\n    }\n  };\n\n  peek() {\n    return this.text[this.pos + 1];\n  };\n\n  end() {\n    return (this.pos >= (this.text.length - 1));\n  };\n\n  scanstring(lex) {\n    var result = ''; // ignore the initial quotation mark\n    // TODO: should check for escaped quotation marks\n    while ((typeof this.peek() !== 'undefined') && this.peek() !== '\"') {\n      result += this.next();\n    }\n    this.next(); // eat the final quotation mark\n    return result;\n  };\n\n  scan(lex) {\n    var result = this.current;\n    if (lex.scanner) {\n      return this['scan' + lex.scanner](lex);\n    }\n    if (lex.test) {\n      while ((typeof this.peek() !== 'undefined') && lex.test.test(this.peek())) {\n        result += this.next();\n      };\n      if (lex.keepLast === true) {\n        result += this.next();\n      }\n    }\n    return result;\n  };\n\n  getToken() {\n    if (!this.end()) {\n      var c = this.next();\n      var types = Object.keys(this.lexicon);\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        if (this.lexicon[type].startTest.test(c)) {\n          var start = this.pos;\n          var value = this.scan(this.lexicon[type]);\n          if (this.lexicon[type].values && this.lexicon[type].values.indexOf(value) === -1) {\n            throw new Error(value + ' token matches ' + type + ' regex, but not one of ' + this.lexicon[type].values.join(','));\n          }\n          return {\n            start: start,\n            end: this.pos,\n            type: type,\n            value: value\n          }\n        }\n      }\n      throw new Error('could not match: ' + c);\n    }\n  };\n\n  nextToken() {\n    var token = this.getToken();\n    while (token && token.type == 'ignore') {\n      token = this.getToken();\n    }\n    return token;\n  };\n\n  allTokens() {\n    var results = [];\n    var token = this.nextToken();\n    while (token) {\n      results.push(token);\n      token = this.nextToken();\n    }\n    return results;\n  };\n\n};\n\nexport default Lexer;\n","/**\n * Hemp\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nfunction InterpretError(message, node) {\n  this.message = message;\n  this.node = node;\n};\nInterpretError.prototype = new Error;\n\nexport default InterpretError;\n","/**\n * Hemp\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nimport Parser from './Parser.js';\nimport InterpretError from './InterpretError.js';\n\nclass Interpreter {\n\n  constructor(parser) {\n    this.parser = parser;\n  };\n\n  visitUpperStatement(node) {\n    var string = '' + this.visit(node.param);\n    return string.toUpperCase();\n  }\n\n  visitLowerStatement(node) {\n    var string = '' + this.visit(node.param);\n    return string.toLowerCase();\n  }\n\n  visitMinusOperator(node) {\n    return -1 * this.visit(node.value);\n  };\n\n  visitBooleanConstant(node) {\n    return node.value;\n  };\n\n  visitBlock(node) {\n    var result;\n    node.nodes.forEach(function(root) {\n      this.visit(root);\n    }.bind(this));\n  };\n\n  visitNumericConstant(node) {\n    return parseFloat(node.value);\n  };\n\n  visitStringConstant(node) {\n    return node.value;\n  };\n\n  visitVariable(node) {\n    var properties = node.value.split('.');\n    var object = this.variables;\n    properties.forEach(function(property) {\n      if (typeof object[property] === 'undefined') {\n        throw new InterpretError('Unknown identifier: ' + node.value, node);\n      }\n      object = object[property];\n    });\n    return object;\n  };\n\n  visitMathExpression(node) {\n    if (node.operator === '+') {\n      return this.visit(node.left) + this.visit(node.right);\n    }\n    if (node.operator === '-') {\n      return this.visit(node.left) - this.visit(node.right);\n    }\n    if (node.operator === '*') {\n      return this.visit(node.left) * this.visit(node.right);\n    }\n    if (node.operator === '-') {\n      return this.visit(node.left) - this.visit(node.right);\n    }\n    throw new InterpretError('Uknown operator: ' + node.operator, node);\n  };\n\n  visitAssignmentExpression(node) {\n    var value = this.visit(node.right);\n    if (!isNaN(value) && (typeof value !== 'boolean')) {\n      value = parseFloat(value);\n    }\n    var properties = node.left.value.split('.');\n    var object = this.variables;\n    properties.forEach(function(property, index) {\n      if (index == properties.length - 1) {\n        if (typeof object[property] === 'string') {\n          object[property] = '' + value;\n        } else {\n          object[property] = value;\n        }\n      } else {\n        if (typeof object[property] === 'undefined') {\n          object[property] = {};\n        }\n        object = object[property];\n      }\n    });\n    return value;\n  };\n\n  visitComparisonExpression(node) {\n    if (node.operator === '==') {\n      return this.visit(node.left) == this.visit(node.right);\n    }\n    if (node.operator === '!=') {\n      return this.visit(node.left) != this.visit(node.right);\n    }\n    if (node.operator === '<=') {\n      return this.visit(node.left) <= this.visit(node.right);\n    }\n    if (node.operator === '>=') {\n      return this.visit(node.left) >= this.visit(node.right);\n    }\n    if (node.operator === '<') {\n      return this.visit(node.left) < this.visit(node.right);\n    }\n    if (node.operator === '>') {\n      return this.visit(node.left) > this.visit(node.right);\n    }\n    throw new InterpretError('Uknown operator: ' + node.operator, node);\n  }\n\n  visitLogicalExpression(node) {\n    if (node.operator === '||') {\n      return this.visit(node.left) || this.visit(node.right);\n    }\n    if (node.operator === '&&') {\n      return this.visit(node.left) && this.visit(node.right);\n    }\n    throw new InterpretError('Uknown operator: ' + node.operator, node);\n  };\n\n  visitIfStatement(node) {\n    if (this.visit(node.test)) {\n      return this.visit(node.consequence);\n    } else {\n      if (node.alternate) {\n        return this.visit(node.alternate);\n      }\n    }\n  };\n\n  visit(node) {\n    var method = 'visit' + node.type;\n    if (typeof this[method] === 'function') {\n      return this[method](node);\n    } else {\n      throw new Error('visit method \"' + method + '\" not found');\n    }\n  };\n\n  run(variables) {\n\n    this.variables = {};\n    if (typeof variables === 'object') {\n      this.variables = variables;\n    }\n\n    var nodes = this.parser.parse();\n    var result;\n    nodes.forEach(function(node) {\n      this.visit(node);\n    }.bind(this));\n\n  };\n\n};\n\nexport default Interpreter;\n","/**\n * Hemp\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nimport Parser from './Parser.js';\nimport Lexer from './Lexer.js';\nimport Interpreter from './Interpreter.js';\nimport ParseError from './ParseError.js';\nimport InterpretError from './InterpretError.js';\n\nclass Lala {\n\n  constructor() {\n\n    this.lexicon = {\n      ignore: {\n        startTest: /[ \\t\\n;]/,\n        test: /[ \\t\\n;]/\n      },\n      identifier: {\n        startTest: /[a-zA-Z]/,\n        test: /[a-zA-Z_\\.]/\n      },\n      number: {\n        startTest: /[0-9]/,\n        test: /[0-9\\.]/\n      },\n      string : {\n        startTest: /[\"]/,\n        scanner: 'string'\n      },\n      operator: {\n        startTest: /[\\+\\-\\*\\/><=|&!]/,\n        test: /[\\+\\*\\/><=|&!]/,\n        values: ['=', '+', '-', '*', '/', '==', '!=', '>=', '<=', '<', '>', '||', '&&']\n      },\n      parenthesis: {\n        startTest: /[\\(\\)]/\n      },\n      braces: {\n        startTest: /[{}]/\n      }\n    };\n\n    this.grammar = {\n      operators: [\n        {value: '=', result: 'AssignmentExpression'},\n        {value: '+', result: 'MathExpression'},\n        {value: '-', result: 'MathExpression'},\n        {value: '*', result: 'MathExpression'},\n        {value: '/', result: 'MathExpression'},\n        {value: '==', result: 'ComparisonExpression'},\n        {value: '!=', result: 'ComparisonExpression'},\n        {value: '<=', result: 'ComparisonExpression'},\n        {value: '>=', result: 'ComparisonExpression'},\n        {value: '>', result: 'ComparisonExpression'},\n        {value: '<', result: 'ComparisonExpression'},\n        {value: '||', result: 'LogicalExpression'},\n        {value: '&&', result: 'LogicalExpression'}\n      ],\n      reserved: ['if', 'else', 'upper', 'lower'],\n      expressions: [\n        {\n          type: 'identifier',\n          value: 'if',\n          result: 'IfStatement',\n          rules: [\n            {type: 'parenthesis', value: '('},\n            {parse: 'term', result: 'test'},\n            {type: 'parenthesis', value: ')'},\n            {type: 'braces', value: '{'},\n            {parse: 'block', result: 'consequence'},\n            {type: 'braces', value: '}'},\n            {type: 'identifier', values: ['else'], optional: true},\n            {type: 'braces', value: '{'},\n            {parse: 'block', result: 'alternate'},\n            {type: 'braces', value: '}'},\n          ]\n        },\n        {\n          type: 'identifier',\n          value: 'upper',\n          result: 'UpperStatement',\n          rules: [\n            {type: 'parenthesis', value: '('},\n            {parse: 'term', result: 'param'},\n            {type: 'parenthesis', value: ')'}\n          ]\n        },\n        {\n          type: 'identifier',\n          value: 'lower',\n          result: 'LowerStatement',\n          rules: [\n            {type: 'parenthesis', value: '('},\n            {parse: 'term', result: 'param'},\n            {type: 'parenthesis', value: ')'}\n          ]\n        }\n      ]\n    };\n\n  };\n  \n  setupBuiltinVariables(variables) {\n    var date = new Date();\n    variables.date = {\n      now: Date.now(),\n      day: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][date.getDay()],\n      month: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Auguest', 'September', 'October', 'November', 'December'][date.getMonth()],\n      year: date.getFullYear()\n    }\n  }\n\n  check(text, variables) {\n    this.setupBuiltinVariables(variables);\n    var lexer = new Lexer(this.lexicon, text);\n    var parser = new Parser(this.grammar, lexer);\n    return parser.parse();\n  };\n  \n  run(text, variables) {\n    this.setupBuiltinVariables(variables);\n    var lexer = new Lexer(this.lexicon, text);\n    var parser = new Parser(this.grammar, lexer);\n    var interpreter = new Interpreter(parser);\n    return {\n      returnValue: interpreter.run(variables),\n      variables: interpreter.variables\n    };\n  }\n\n};\n\nLala.Parser = Parser;\nLala.Lexer = Lexer;\nLala.ParseError = ParseError;\nLala.InterpretError = InterpretError;\n\nexport default Lala;\n"],"names":["ParseError","message","token","expected","prototype","Error","Parser","grammar","lexer","nextToken","reset","JSON","parse","stringify","type","value","cloneCurrentToken","eat","result","term","start","end","reserved","indexOf","expression","block","node","factor","foundOperator","i","operators","length","makeTermNode","expressions","rules","j","rule","optional","values","nodes","push","Lexer","lexicon","text","pos","current","lex","peek","next","scanner","test","keepLast","c","types","Object","keys","startTest","scan","join","getToken","results","InterpretError","Interpreter","parser","string","visit","param","toUpperCase","toLowerCase","forEach","root","bind","parseFloat","properties","split","object","variables","property","operator","left","right","isNaN","index","consequence","alternate","method","Lala","date","Date","now","getDay","getMonth","getFullYear","setupBuiltinVariables","interpreter","run"],"mappings":"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"}