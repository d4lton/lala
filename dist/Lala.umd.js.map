{"version":3,"file":null,"sources":["../src/ParseError.js","../src/Parser.js","../src/Lexer.js","../src/InterpretError.js","../src/Formatter.js","../src/Interpreter.js","../src/Lala.js"],"sourcesContent":["/**\n * Lala\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nfunction ParseError(message, token, expected) {\n  this.message = message;\n  this.token = token;\n  this.expected = expected;\n};\nParseError.prototype = new Error;\n\nexport default ParseError;\n","/**\n * Lala\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nimport ParseError from './ParseError.js';\n\nclass Parser {\n\n  constructor(grammar, lexer) {\n    this.grammar = grammar;\n    this.lexer = lexer;\n    this.token = this.lexer.nextToken();\n  };\n\n  reset() {\n    this.lexer.reset();\n    this.token = this.lexer.nextToken();\n  };\n\n  cloneCurrentToken() {\n    return JSON.parse(JSON.stringify(this.token));\n  };\n\n  eat(type, value) {\n    if (!this.token) {\n        throw new ParseError('Expected ' + type + ': \"' + value + '\"', null, {type: type, value: value});\n    }\n    if (this.token.type == type && ((typeof value !== 'undefined') ? (this.token.value == value) : true)) {\n      this.token = this.lexer.nextToken();\n    } else {\n      if (typeof value !== 'undefined') {\n        throw new ParseError('Expected ' + type + ': \"' + value + '\"', this.cloneCurrentToken(), {type: type, value: value});\n      } else {\n        throw new ParseError('Expected ' + type, this.cloneCurrentToken(), {type: type});\n      }\n    }\n  };\n\n  factor() {\n    var token = this.cloneCurrentToken();\n    if (token.type == 'parenthesis' && token.value == '(') {\n      this.eat(token.type, '(');\n      var result = this.term();\n      this.eat('parenthesis', ')');\n      return result;\n    } else if (token.type == 'operator' && token.value == '-') {\n      this.eat(token.type);\n      return {\n        type: 'MinusOperator',\n        value: this.term(),\n        start: token.start,\n        end: token.end\n      }\n    } else if (token.type == 'number') {\n      this.eat(token.type);\n      return {\n        type: 'NumericConstant',\n        value: token.value,\n        start: token.start,\n        end: token.end\n      };\n    } else if (token.type == \"string\") {\n      this.eat(token.type);\n      return {\n        type: 'StringConstant',\n        value: token.value,\n        start: token.start,\n        end: token.end\n      };\n    } else if (token.type == 'identifier') {\n      if (this.grammar.reserved.indexOf(token.value) !== -1) {\n        return this.expression();\n      }\n      this.eat(token.type);\n      var type = 'Variable';\n      if (token.value == 'true' || token.value == 'false') {\n        type = 'BooleanConstant';\n        token.value = (token.value == 'true') ? true : false;\n      }\n      return {\n        type: type,\n        value: token.value,\n        start: token.start,\n        end: token.end\n      }\n    } else if (token.type == 'braces') {\n      this.eat(token.type, '{');\n      var result = this.block();\n      this.eat('braces', '}');\n      return result;\n    } else {\n      throw new ParseError('Expected an expression', token);\n    }\n  };\n\n  makeTermNode(type, node) {\n    var token = this.cloneCurrentToken();\n    this.eat(this.token.type);\n    return {\n      type: type,\n      left: node,\n      operator: token.value,\n      right: this.term(),\n      start: token.start,\n      end: token.end\n    };\n  };\n\n  term() {\n\n    var node = this.factor();\n\n    var foundOperator = false;\n    do {\n      foundOperator = false;\n      for (var i = 0; i < this.grammar.operators.length; i++) {\n        while (this.token && this.token.type === 'operator' && this.token.value === this.grammar.operators[i].value) {\n          node = this.makeTermNode(this.grammar.operators[i].result, node);\n          foundOperator = true;\n        }\n      }\n    } while (foundOperator);\n\n    return node;\n\n  };\n\n  expression() {\n\n    if (this.token) {\n      if (this.token.type === 'identifier' && this.grammar.reserved.indexOf(this.token.value) !== -1) {\n        for (var i = 0; i < this.grammar.expressions.length; i++) {\n          if (this.grammar.expressions[i].type === this.token.type && this.grammar.expressions[i].value === this.token.value) {\n            var node = {\n              type: this.grammar.expressions[i].result,\n              start: this.token.start,\n              end: this.token.end\n            };\n            this.eat(this.token.type, this.token.value);\n            var rules = this.grammar.expressions[i].rules;\n            for (var j = 0; j < rules.length; j++) {\n              var rule = rules[j];\n              if (rule.optional === true && (!this.token || this.token.type != rule.type || rule.values.indexOf(this.token.value) === -1)) {\n                break;\n              }\n              if (rule.parse) {\n                node[rule.result] = this[rule.parse]();\n              } else {\n                this.eat(rule.type, rule.value);\n              }\n            }\n            return node;\n          }\n        }\n      }\n      return this.term();\n    }\n\n  };\n\n  block() {\n    var node = {\n      type: 'Block',\n      nodes: []\n    };\n    while (this.token) {\n      if (this.token.type === 'braces' && this.token.value === '}') {\n        break;\n      }\n      node.nodes.push(this.expression());\n    }\n    return node;\n  };\n\n  parse() {\n    this.reset();\n    return [this.block()];\n  };\n\n};\n\nexport default Parser;\n","/**\n * Lala\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nclass Lexer {\n\n  constructor(lexicon, text) {\n    this.lexicon = lexicon;\n    this.text = text;\n    this.pos = -1;\n  }\n\n  reset() {\n    this.pos = -1;\n  };\n\n  next() {\n    if (!this.end()) {\n      this.pos++;\n      this.current = this.text[this.pos];\n      return this.current;\n    }\n  };\n\n  peek() {\n    return this.text[this.pos + 1];\n  };\n\n  end() {\n    return (this.pos >= (this.text.length - 1));\n  };\n\n  scanstring(lex) {\n    var result = ''; // ignore the initial quotation mark\n    // TODO: should check for escaped quotation marks\n    while ((typeof this.peek() !== 'undefined') && this.peek() !== '\"') {\n      result += this.next();\n    }\n    this.next(); // eat the final quotation mark\n    return result;\n  };\n\n  scan(lex) {\n    var result = this.current;\n    if (lex.scanner) {\n      return this['scan' + lex.scanner](lex);\n    }\n    if (lex.test) {\n      while ((typeof this.peek() !== 'undefined') && lex.test.test(this.peek())) {\n        result += this.next();\n      };\n      if (lex.keepLast === true) {\n        result += this.next();\n      }\n    }\n    return result;\n  };\n\n  getToken() {\n    if (!this.end()) {\n      var c = this.next();\n      var types = Object.keys(this.lexicon);\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        if (this.lexicon[type].startTest.test(c)) {\n          var start = this.pos;\n          var value = this.scan(this.lexicon[type]);\n          if (this.lexicon[type].values && this.lexicon[type].values.indexOf(value) === -1) {\n            throw new Error(value + ' token matches ' + type + ' regex, but not one of ' + this.lexicon[type].values.join(','));\n          }\n          return {\n            start: start,\n            end: this.pos,\n            type: type,\n            value: value\n          }\n        }\n      }\n      throw new Error('could not match: ' + c);\n    }\n  };\n\n  nextToken() {\n    var token = this.getToken();\n    while (token && token.type == 'ignore') {\n      token = this.getToken();\n    }\n    return token;\n  };\n\n  allTokens() {\n    var results = [];\n    var token = this.nextToken();\n    while (token) {\n      results.push(token);\n      token = this.nextToken();\n    }\n    return results;\n  };\n\n};\n\nexport default Lexer;\n","/**\n * Lala\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nfunction InterpretError(message, node) {\n  this.message = message;\n  this.node = node;\n};\nInterpretError.prototype = new Error;\n\nexport default InterpretError;\n","/**\n * Formatter, repackaged from http://locutus.io/php/sprintf under MIT license\n */\nclass Formatter {\n\n  static sprintf() {\n\n    var regex = /%%|%(\\d+\\$)?([-+'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(?:\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g\n    var a = arguments\n    var i = 0\n    var format = a[i++]\n  \n    var _pad = function (str, len, chr, leftJustify) {\n      if (!chr) {\n        chr = ' '\n      }\n      var padding = (str.length >= len) ? '' : new Array(1 + len - str.length >>> 0).join(chr)\n      return leftJustify ? str + padding : padding + str\n    }\n  \n    var justify = function (value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {\n      var diff = minWidth - value.length\n      if (diff > 0) {\n        if (leftJustify || !zeroPad) {\n          value = _pad(value, minWidth, customPadChar, leftJustify)\n        } else {\n          value = [\n            value.slice(0, prefix.length),\n            _pad('', diff, '0', true),\n            value.slice(prefix.length)\n          ].join('')\n        }\n      }\n      return value\n    }\n\n    var _formatBaseX = function (value, base, prefix, leftJustify, minWidth, precision, zeroPad) {\n      // Note: casts negative numbers to positive ones\n      var number = value >>> 0\n      prefix = (prefix && number && {\n        '2': '0b',\n        '8': '0',\n        '16': '0x'\n      }[base]) || ''\n      value = prefix + _pad(number.toString(base), precision || 0, '0', false)\n      return justify(value, prefix, leftJustify, minWidth, zeroPad)\n    }\n  \n    // _formatString()\n    var _formatString = function (value, leftJustify, minWidth, precision, zeroPad, customPadChar) {\n      if (precision !== null && precision !== undefined) {\n        value = value.slice(0, precision)\n      }\n      return justify(value, '', leftJustify, minWidth, zeroPad, customPadChar)\n    }\n\n    // doFormat()\n    var doFormat = function (substring, valueIndex, flags, minWidth, precision, type) {\n      var number, prefix, method, textTransform, value\n  \n      if (substring === '%%') {\n        return '%'\n      }\n  \n      // parse flags\n      var leftJustify = false\n      var positivePrefix = ''\n      var zeroPad = false\n      var prefixBaseX = false\n      var customPadChar = ' '\n      var flagsl = flags.length\n      var j\n      for (j = 0; j < flagsl; j++) {\n        switch (flags.charAt(j)) {\n          case ' ':\n            positivePrefix = ' '\n            break\n          case '+':\n            positivePrefix = '+'\n            break\n          case '-':\n            leftJustify = true\n            break\n          case \"'\":\n            customPadChar = flags.charAt(j + 1)\n            break\n          case '0':\n            zeroPad = true\n            customPadChar = '0'\n            break\n          case '#':\n            prefixBaseX = true\n            break\n        }\n      }\n  \n      // parameters may be null, undefined, empty-string or real valued\n      // we want to ignore null, undefined and empty-string values\n      if (!minWidth) {\n        minWidth = 0\n      } else if (minWidth === '*') {\n        minWidth = +a[i++]\n      } else if (minWidth.charAt(0) === '*') {\n        minWidth = +a[minWidth.slice(1, -1)]\n      } else {\n        minWidth = +minWidth\n      }\n  \n      // Note: undocumented perl feature:\n      if (minWidth < 0) {\n        minWidth = -minWidth\n        leftJustify = true\n      }\n  \n      if (!isFinite(minWidth)) {\n        throw new Error('sprintf: (minimum-)width must be finite')\n      }\n  \n      if (!precision) {\n        precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type === 'd') ? 0 : undefined\n      } else if (precision === '*') {\n        precision = +a[i++]\n      } else if (precision.charAt(0) === '*') {\n        precision = +a[precision.slice(1, -1)]\n      } else {\n        precision = +precision\n      }\n  \n      // grab value using valueIndex if required?\n      value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++]\n  \n      switch (type) {\n        case 's':\n          return _formatString(value + '', leftJustify, minWidth, precision, zeroPad, customPadChar)\n        case 'c':\n          return _formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad)\n        case 'b':\n          return _formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n        case 'o':\n          return _formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n        case 'x':\n          return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n        case 'X':\n          return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n          .toUpperCase()\n        case 'u':\n          return _formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n        case 'i':\n        case 'd':\n          number = +value || 0\n          // Plain Math.round doesn't just truncate\n          number = Math.round(number - number % 1)\n          prefix = number < 0 ? '-' : positivePrefix\n          value = prefix + _pad(String(Math.abs(number)), precision, '0', false)\n          return justify(value, prefix, leftJustify, minWidth, zeroPad)\n        case 'e':\n        case 'E':\n        case 'f': // @todo: Should handle locales (as per setlocale)\n        case 'F':\n        case 'g':\n        case 'G':\n          number = +value\n          prefix = number < 0 ? '-' : positivePrefix\n          method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())]\n          textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2]\n          value = prefix + Math.abs(number)[method](precision)\n          return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]()\n        default:\n          return substring\n      }\n    }\n  \n    return format.replace(regex, doFormat)\n\n  }\n\n};\n\nexport default Formatter;","/**\n * Lala\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nimport Parser from './Parser.js';\nimport InterpretError from './InterpretError.js';\nimport Formatter from './Formatter.js';\n\nclass Interpreter {\n\n  constructor(parser) {\n    this.parser = parser;\n  };\n  \n  visitFormatStatement(node) {\n    var format = this.visit(node.format);\n    var params = [this.visit(node.param)];\n    return Formatter.sprintf(format, params);\n  };\n\n  visitUpperStatement(node) {\n    var string = '' + this.visit(node.param);\n    return string.toUpperCase();\n  };\n\n  visitLowerStatement(node) {\n    var string = '' + this.visit(node.param);\n    return string.toLowerCase();\n  };\n\n  strReverse(str) {\n    return (str === '') ? '' : this.strReverse(str.substr(1)) + str.charAt(0);\n  };\n\n  visitMinusOperator(node) {\n    var value = this.visit(node.value);\n    if (typeof value === 'string') {\n      return this.strReverse(value);\n    } else {\n    return -1 * value;\n    }\n  };\n\n  visitBooleanConstant(node) {\n    return node.value;\n  };\n\n  visitBlock(node) {\n    var result;\n    node.nodes.forEach(function(root) {\n      this.visit(root);\n    }.bind(this));\n  };\n\n  visitNumericConstant(node) {\n    return parseFloat(node.value);\n  };\n\n  visitStringConstant(node) {\n    return node.value;\n  };\n\n  visitVariable(node) {\n    var properties = node.value.split('.');\n    var object = this.variables;\n    for (var i = 0; i < properties.length; i++) {\n      if (typeof object[properties[i]] === 'undefined') {\n        object = null;\n        break;\n      } else {\n        object = object[properties[i]];\n      }\n    }\n    return object;\n  };\n\n  visitMathExpression(node) {\n    if (node.operator === '+') {\n      return this.visit(node.left) + this.visit(node.right);\n    }\n    if (node.operator === '-') {\n      return this.visit(node.left) - this.visit(node.right);\n    }\n    if (node.operator === '*') {\n      return this.visit(node.left) * this.visit(node.right);\n    }\n    if (node.operator === '/') {\n      return this.visit(node.left) / this.visit(node.right);\n    }\n    throw new InterpretError('Uknown operator: ' + node.operator, node);\n  };\n\n  visitAssignmentExpression(node) {\n    var value = this.visit(node.right);\n    /*\n    if (!isNaN(value) && (typeof value !== 'boolean')) {\n      value = parseFloat(value);\n    }\n    */\n    var properties = node.left.value.split('.');\n    var object = this.variables;\n    properties.forEach(function(property, index) {\n      if (index == properties.length - 1) {\n        if (typeof object[property] === 'string') {\n          object[property] = '' + value;\n        } else {\n          object[property] = value;\n        }\n      } else {\n        if (typeof object[property] === 'undefined') {\n          object[property] = {};\n        }\n        object = object[property];\n      }\n    });\n    return value;\n  };\n\n  visitComparisonExpression(node) {\n    if (node.operator === '==') {\n      return this.visit(node.left) == this.visit(node.right);\n    }\n    if (node.operator === '!=') {\n      return this.visit(node.left) != this.visit(node.right);\n    }\n    if (node.operator === '<=') {\n      return this.visit(node.left) <= this.visit(node.right);\n    }\n    if (node.operator === '>=') {\n      return this.visit(node.left) >= this.visit(node.right);\n    }\n    if (node.operator === '<') {\n      return this.visit(node.left) < this.visit(node.right);\n    }\n    if (node.operator === '>') {\n      return this.visit(node.left) > this.visit(node.right);\n    }\n    if (node.operator === '=~') {\n      try {\n        var haystack = this.visit(node.left).toString().toLowerCase();\n        var needle = this.visit(node.right).toString().toLowerCase();\n        var regex = new RegExp(needle, \"ig\");\n        var match = haystack.match(regex);\n        return match !== null;\n      } catch (error) {\n        console.log('match exception: ' + error);\n      }\n      return false;\n    }\n    throw new InterpretError('Uknown operator: ' + node.operator, node);\n  }\n\n  visitLogicalExpression(node) {\n    if (node.operator === '||') {\n      return this.visit(node.left) || this.visit(node.right);\n    }\n    if (node.operator === '&&') {\n      return this.visit(node.left) && this.visit(node.right);\n    }\n    throw new InterpretError('Uknown operator: ' + node.operator, node);\n  };\n\n  visitIfStatement(node) {\n    if (this.visit(node.test)) {\n      return this.visit(node.consequence);\n    } else {\n      if (node.alternate) {\n        return this.visit(node.alternate);\n      }\n    }\n  };\n\n  visit(node) {\n    var method = 'visit' + node.type;\n    if (typeof this[method] === 'function') {\n      return this[method](node);\n    } else {\n      throw new Error('visit method \"' + method + '\" not found');\n    }\n  };\n\n  run(variables) {\n\n    this.variables = {};\n    if (typeof variables === 'object') {\n      this.variables = variables;\n    }\n\n    var nodes = this.parser.parse();\n    var result;\n    nodes.forEach(function(node) {\n      this.visit(node);\n    }.bind(this));\n\n  };\n\n};\n\nexport default Interpreter;\n","/**\n * Lala\n *\n * Copyright ©2017 Dana Basken <dbasken@gmail.com>\n *\n */\nimport Parser from './Parser.js';\nimport Lexer from './Lexer.js';\nimport Interpreter from './Interpreter.js';\nimport ParseError from './ParseError.js';\nimport InterpretError from './InterpretError.js';\n\nclass Lala {\n\n  constructor() {\n\n    this.lexicon = {\n      ignore: {\n        startTest: /[ \\t\\n;]/,\n        test: /[ \\t\\n;]/\n      },\n      identifier: {\n        startTest: /[a-zA-Z]/,\n        test: /[a-zA-Z0-9_\\.]/\n      },\n      number: {\n        startTest: /[0-9]/,\n        test: /[0-9\\.]/\n      },\n      string : {\n        startTest: /[\"]/,\n        scanner: 'string'\n      },\n      operator: {\n        startTest: /[\\+\\-\\*\\/><=|&!]/,\n        test: /[\\+\\*\\/><=|&!~]/,\n        values: ['=', '+', '-', '*', '/', '==', '!=', '>=', '<=', '<', '>', '=~', '||', '&&']\n      },\n      parenthesis: {\n        startTest: /[\\(\\)]/\n      },\n      braces: {\n        startTest: /[{}]/\n      },\n      punctuation: {\n        startTest: /,/\n      }\n    };\n\n    this.grammar = {\n      operators: [\n        {value: '=', result: 'AssignmentExpression'},\n        {value: '+', result: 'MathExpression'},\n        {value: '-', result: 'MathExpression'},\n        {value: '*', result: 'MathExpression'},\n        {value: '/', result: 'MathExpression'},\n        {value: '==', result: 'ComparisonExpression'},\n        {value: '!=', result: 'ComparisonExpression'},\n        {value: '<=', result: 'ComparisonExpression'},\n        {value: '>=', result: 'ComparisonExpression'},\n        {value: '>', result: 'ComparisonExpression'},\n        {value: '<', result: 'ComparisonExpression'},\n        {value: '=~', result: 'ComparisonExpression'},\n        {value: '||', result: 'LogicalExpression'},\n        {value: '&&', result: 'LogicalExpression'}\n      ],\n      reserved: ['if', 'else', 'upper', 'lower', 'format'],\n      expressions: [\n        {\n          type: 'identifier',\n          value: 'if',\n          result: 'IfStatement',\n          rules: [\n            {type: 'parenthesis', value: '('},\n            {parse: 'term', result: 'test'},\n            {type: 'parenthesis', value: ')'},\n            {type: 'braces', value: '{'},\n            {parse: 'block', result: 'consequence'},\n            {type: 'braces', value: '}'},\n            {type: 'identifier', values: ['else'], optional: true},\n            {type: 'braces', value: '{'},\n            {parse: 'block', result: 'alternate'},\n            {type: 'braces', value: '}'},\n          ]\n        },\n        {\n          type: 'identifier',\n          value: 'upper',\n          result: 'UpperStatement',\n          rules: [\n            {parse: 'factor', result: 'param'}\n          ]\n        },\n        {\n          type: 'identifier',\n          value: 'lower',\n          result: 'LowerStatement',\n          rules: [\n            {parse: 'factor', result: 'param'}\n          ]\n        },\n        {\n          type: 'identifier',\n          value: 'format',\n          result: 'FormatStatement',\n          rules: [\n            {parse: 'factor', result: 'format'},\n            {type: 'punctuation', value: ','},\n            {parse: 'factor', result: 'param'}\n          ]\n        }\n      ]\n    };\n\n  };\n  \n  setupBuiltinVariables(variables) {\n    var date = new Date();\n    variables.date = {\n      now: Date.now(),\n      day: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][date.getDay()],\n      month: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Auguest', 'September', 'October', 'November', 'December'][date.getMonth()],\n      year: date.getFullYear()\n    }\n  }\n\n  check(text, variables) {\n    this.setupBuiltinVariables(variables);\n    var lexer = new Lexer(this.lexicon, text);\n    var parser = new Parser(this.grammar, lexer);\n    return parser.parse();\n  };\n  \n  run(text, variables) {\n    this.setupBuiltinVariables(variables);\n    var lexer = new Lexer(this.lexicon, text);\n    var parser = new Parser(this.grammar, lexer);\n    var interpreter = new Interpreter(parser);\n    return {\n      returnValue: interpreter.run(variables),\n      variables: interpreter.variables\n    };\n  }\n\n};\n\nLala.Parser = Parser;\nLala.Lexer = Lexer;\nLala.ParseError = ParseError;\nLala.InterpretError = InterpretError;\n\nexport default Lala;\n"],"names":["ParseError","message","token","expected","prototype","Error","Parser","grammar","lexer","nextToken","reset","JSON","parse","stringify","type","value","cloneCurrentToken","eat","result","term","start","end","reserved","indexOf","expression","block","node","factor","foundOperator","i","operators","length","makeTermNode","expressions","rules","j","rule","optional","values","nodes","push","Lexer","lexicon","text","pos","current","lex","peek","next","scanner","test","keepLast","c","types","Object","keys","startTest","scan","join","getToken","results","InterpretError","Formatter","regex","a","arguments","format","_pad","str","len","chr","leftJustify","padding","Array","justify","prefix","minWidth","zeroPad","customPadChar","diff","slice","_formatBaseX","base","precision","number","toString","_formatString","undefined","doFormat","substring","valueIndex","flags","method","textTransform","positivePrefix","prefixBaseX","flagsl","charAt","isFinite","String","fromCharCode","toUpperCase","Math","round","abs","toLowerCase","replace","Interpreter","parser","visit","params","param","sprintf","string","strReverse","substr","forEach","root","bind","parseFloat","properties","split","object","variables","operator","left","right","property","index","haystack","needle","RegExp","match","error","log","consequence","alternate","Lala","date","Date","now","getDay","getMonth","getFullYear","setupBuiltinVariables","interpreter","run"],"mappings":"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"}